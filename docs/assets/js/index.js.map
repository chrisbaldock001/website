{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/components/navigation.js","assets/js/components/overviewStats.js","assets/js/components/projectStats.js","assets/js/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Navigation","element","_classCallCheck","this","root","bindEvents","icon","currentTarget","mobileMenu","parentNode","classList","contains","closeNav","openNav","add","document","querySelector","remove","addEventListener","toggleNav","bind","addLegend","legend","L","control","position","onAdd","map","div","DomUtil","create","innerHTML","addTo","addGeojsonLayer","url","geojsonData","$","ajax","dataType","success","console","log","error","xhr","alert","statusText","when","done","geojsonMarkerGreen","radius","fillColor","color","weight","opacity","fillOpacity","layer","geoJSON","responseJSON","pointToLayer","feature","latlng","circleMarker","setStyle","properties","status","bindPopup","popup","project_id","name","fitBounds","getBounds","populateProjectsTable","finishedProjects","features","filter","item","mappedArea","projectArea","parseFloat","getElementById","parseInt","toString","replace","tableRef","getElementsByTagName","forEach","tr","insertRow","td","createElement","appendChild","progress","Math","round","number_of_users","DataTable","addClass","initMap","setView","tileLayer","attribution","subdomains","setTimeout","invalidateSize","getQueryVariable","variable","query","window","location","search","substring","vars","split","pair","initProjectMap","addProject","projectId","geojsonPolygonStyle","style","zoomToFeature","projectInfo","eachLayer","populateProjectDataTable","datasets","description","datatype","makePlot","attribute","Plotly","d3","csv","data","processData","allRows","x","y","row","push","makePlotly","traces","layout","autosize","height","margin","l","b","pad","yaxis","range","title","text","newPlot","displayModeBar","initAnalyticsProject","classRemove","classes","clas","viewport","width","body","clientWidth","html","touchEnabled","device","doneResizing","isMobile","_navigation","_overviewStats","_projectStats","resizeId","theDate","Date","getFullYear","_navigation2","default","clearTimeout"],"mappings":"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","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nexport default class Navigation {\n    constructor(element) {\n        this.root = element;\n\n        this.bindEvents();\n    }\n\n    toggleNav(e) {\n        var icon = e.currentTarget;\n        var mobileMenu = e.currentTarget.parentNode.parentNode;\n\n        (mobileMenu.classList.contains('active')) ? this.closeNav(icon, mobileMenu): this.openNav(icon, mobileMenu);\n    }\n\n    openNav(icon, mobileMenu) {\n        mobileMenu.classList.add('active');\n        icon.classList.add('active');\n        document.querySelector('body').classList.add('menu-active');\n\n        // mobileMenu.querySelector('.navlink:first-child').focus();\n    }\n\n    closeNav(icon, mobileMenu) {\n        mobileMenu.classList.remove('active');\n        icon.classList.remove('active');\n        document.querySelector('body').classList.remove('menu-active');\n    }\n\n    bindEvents() {\n        this.root.addEventListener('click', this.toggleNav.bind(this));\n    }\n}","var map;\n\nexports.initMap = function initMap() {\n\n  var myStyle = {\n\t\"color\": \"#ff7800\",\n\t\"weight\": 5,\n\t\"opacity\": 0.65\n  };\n\n  map = L.map('map').setView([0.0, 0.0], 2);\n  L.tileLayer( 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {\n    attribution: 'Map tiles by <a href=\"https://carto.com/\">Carto</a>, under <a href=\"https://creativecommons.org/licenses/by/3.0/\">CC BY 3.0.</a> Data by <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, under ODbL.',\n    subdomains: ['a','b','c']\n  }).addTo( map );\n  console.log('added map');\n  var projectCentroidsUrl = 'https://apps.mapswipe.org/api/projects/projects_centroid.geojson';\n  setTimeout(function(){ map.invalidateSize()}, 400);\n  addGeojsonLayer(projectCentroidsUrl);\n\n  // add legend\n  addLegend()\n\n}\n\nfunction addLegend() {\n  var legend = L.control({position: 'topright'});\n  legend.onAdd = function (map) {\n\tvar div = L.DomUtil.create('div', 'info legend')\n\tdiv.innerHTML += '<i style=\"background:orange\"></i>active<br>'\n\tdiv.innerHTML += '<i style=\"background:blue\"></i>finished<br>'\n\tdiv.innerHTML += '<i style=\"background:grey\"></i>inactive<br>'\n\treturn div;\n  };\n  legend.addTo(map);\n}\n\nfunction addGeojsonLayer (url) {\n  var geojsonData = $.ajax({\n    url:url,\n    dataType: \"json\",\n    success: console.log(\"mapswipe project centroids data successfully loaded.\"),\n    error: function (xhr) {\n      alert(xhr.statusText)\n    }\n  })\n  // Specify that this code should run once the county data request is complete\n  $.when(geojsonData).done(function() {\n\n    // define default point style\n    var geojsonMarkerGreen = {\n        radius: 6,\n        fillColor: \"grey\",\n        color: \"white\",\n        weight: 1,\n        opacity: 1,\n        fillOpacity: 0.8\n    };\n\n    // create geojson layer\n    var layer = L.geoJSON(geojsonData.responseJSON, {\n        pointToLayer: function (feature, latlng) {\n            return L.circleMarker(latlng, geojsonMarkerGreen);\n        }\n    })\n\n    // set style based on feature properties\n    layer.setStyle(function(feature) {\n        if (feature.properties.status == 'active') {\n            return {fillColor: 'orange', color:'black', radius: 9}\n        } else if (feature.properties.status == 'finished') {\n            return {fillColor: 'blue'}\n        } else  if (feature.properties.status == 'inactive') {\n            return {fillColor: 'grey'}\n        }\n    }).addTo(map)\n\n    // add a popup\n    layer.bindPopup(function (layer) {\n        // popup with a link to the project page with detailed information\n        popup = '<a href=\"project.html?projectId='+layer.feature.properties.project_id+'\">'+layer.feature.properties.name+'</a>'\n        return popup;\n    });\n\n    // fit to layer extent\n    map.fitBounds(layer.getBounds());\n\n    // add data to projects table\n    populateProjectsTable(geojsonData.responseJSON);\n\n    // add overview stats\n    var finishedProjects = geojsonData.responseJSON.features.filter(function(item) {\n        return item['properties']['status'] == 'finished' | item['properties']['status'] == 'archived'\n    })\n\n    var mappedArea = 0.0\n    for (var i = 0; i < finishedProjects.length; i++) {\n      var projectArea = parseFloat(finishedProjects[i]['properties']['area_sqkm'])\n      if (projectArea > 0) {\n        mappedArea += projectArea\n        }\n      }\n\n    document.getElementById('stats-finished-projects').innerHTML = finishedProjects.length\n    // convert to broken up numbers\n    document.getElementById('stats-mapped-area').innerHTML = (parseInt(mappedArea/1000)*1000).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  })\n\n}\n\nfunction populateProjectsTable(geojsonData) {\n  console.log('added projects')\n\n  var tableRef = document.getElementById('projectsTable').getElementsByTagName('tbody')[0];\n\n  geojsonData.features.forEach(function(element) {\n\n    var tr = tableRef.insertRow();\n\n    var td = document.createElement('td')\n    td.innerHTML = '<a href=\"project.html?projectId='+element.properties.project_id+'\">'+element.properties.name+'</a>'\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    td.innerHTML = element.properties.status\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    if (element.properties.progress > 0) {\n        td.innerHTML = Math.round(100*element.properties.progress)+'%'\n    } else {\n        td.innerHTML = 'not available'\n    }\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    if (parseInt(element.properties.number_of_users) > 0) {\n        td.innerHTML = element.properties.number_of_users\n    } else {\n        td.innerHTML = 'not available'\n    }\n\n    tr.appendChild(td)\n  });\n\n  $('#projectsTable').DataTable();\n  $('.dataTables_length').addClass('bs-select');\n\n}\n","var map;\n\nexports.initAnalyticsProject = function initAnalyticsProject() {\n  // load project id from query variable\n  var projectId = getQueryVariable('projectId').toString()\n  console.log(projectId)\n\n  // init basic map with all projects as polygon, zoom to selected project\n  initProjectMap();\n  var url = 'https://apps.mapswipe.org/api/projects/projects_geom.geojson';\n  addProject(url, projectId);\n\n  // make plot for selected project\n  url = 'https://apps.mapswipe.org/api/history/history_'+projectId+'.csv'\n  makePlot(url, projectId, 'cum_progress');\n\n  // add items and links to download table\n  populateProjectDataTable(projectId);\n\n}\n\n\nfunction getQueryVariable(variable) {\n   var query = window.location.search.substring(1);\n   console.log(query)\n   var vars = query.split(\"&\");\n   for (var i=0;i<vars.length;i++) {\n       var pair = vars[i].split(\"=\");\n       if(pair[0] == variable){return pair[1];}\n   }\n   return(false);\n}\n\n\nfunction initProjectMap() {\n  map = L.map('map').setView([0.0, 0.0], 2);\n  L.tileLayer( 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {\n    attribution: 'Map tiles by <a href=\"https://carto.com/\">Carto</a>, under <a href=\"https://creativecommons.org/licenses/by/3.0/\">CC BY 3.0.</a> Data by <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, under ODbL.',\n    subdomains: ['a','b','c']\n  }).addTo( map );\n  console.log('added map');\n\n  setTimeout(function(){ map.invalidateSize()}, 400);\n\n  var legend = L.control({position: 'bottomleft'});\n  legend.onAdd = function (map) {\n\tvar div = L.DomUtil.create('div', 'info legend')\n\tdiv.innerHTML += '<i style=\"background:orange\"></i>active<br>'\n\tdiv.innerHTML += '<i style=\"background:blue\"></i>finished<br>'\n\tdiv.innerHTML += '<i style=\"background:grey\"></i>inactive<br>'\n\treturn div;\n  };\n  legend.addTo(map);\n\n}\n\n\nfunction addProject (url, projectId) {\n  var geojsonData = $.ajax({\n    url:url,\n    dataType: \"json\",\n    success: console.log(\"mapswipe project centroids data successfully loaded.\"),\n    error: function (xhr) {\n      alert(xhr.statusText)\n    }\n  })\n  // Specify that this code should run once the county data request is complete\n  $.when(geojsonData).done(function() {\n\n    // define default point style\n    var geojsonPolygonStyle= {\n        fillColor: \"grey\",\n        color: \"white\",\n        weight: 1,\n        opacity: 1,\n        fillOpacity: 0.4\n    };\n\n    // create geojson layer\n    var layer = L.geoJSON(geojsonData.responseJSON, {\n        style: geojsonPolygonStyle\n    })\n\n    // set style based on feature properties\n    layer.setStyle(function(feature) {\n        if (feature.properties.status == 'active') {\n            var style = {fillColor: 'orange', color:'black'}\n        } else if (feature.properties.status == 'finished') {\n            style = {fillColor: 'blue'}\n        } else if (feature.properties.status == 'inactive') {\n            style = {fillColor: 'grey'}\n        }\n        if (feature.properties.project_id == projectId) {\n            style.color = 'black',\n            style.weight = 3\n        }\n        return style\n    }).addTo(map)\n\n    // add a popup\n    layer.bindPopup(function (layer) {\n        // popup with a link to the project page with detailed information\n        popup = '<a href=\"project.html?projectId='+layer.feature.properties.project_id+'\">'+layer.feature.properties.name+'</a>'\n        return popup;\n    });\n\n    // zoom to selected project\n    zoomToFeature(layer, projectId);\n\n\n    // get info for our project\n    var projectInfo = geojsonData.responseJSON.features.filter(function(item) {\n        return item['properties']['project_id'] == projectId\n    })[0]['properties']\n\n    // add other project info to html\n    document.getElementById('project-info-name').innerHTML = projectInfo['name']\n    document.getElementById('project-info-status').innerHTML = projectInfo['status']\n    document.getElementById('project-info-description').innerHTML = projectInfo['project_details']\n    document.getElementById('project-info-progress').innerHTML = parseInt(Math.round(100 * projectInfo['progress']))\n    document.getElementById('project-info-contributors').innerHTML = projectInfo['number_of_users']\n    document.getElementById('project-info-area').innerHTML = parseInt(projectInfo['area_sqkm']).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n\n  })\n}\n\n\nfunction zoomToFeature(layer, projectId) {\n  layer.eachLayer(function(layer) {\n    if (layer.feature.properties.project_id == projectId) {\n        console.log('zoom to feature')\n        map.fitBounds(layer.getBounds());\n    }\n  })\n\n}\n\n\nfunction populateProjectDataTable(projectId) {\n\n  var datasets = [\n    {'name': 'Aggregated Results',\n     'url': 'https://apps.mapswipe.org/api/agg_results/agg_results_' + projectId + '.csv',\n     'description': 'aggregated results',\n     'datatype': 'CSV'\n     },\n     {'name': 'Aggregated Results (with Geometry)',\n     'url': 'https://apps.mapswipe.org/api/agg_results/agg_results_' + projectId + '_geom.geojson',\n     'description': 'aggregated results',\n     'datatype': 'GeoJSON'\n     },\n     {'name': 'HOT Tasking Manager Geometries',\n     'url': 'https://apps.mapswipe.org/api/hot_tm/hot_tm_' + projectId + '.geojson',\n     'description': 'This dataset contains shapes that are ready to use in the HOT Tasking Manager. Currently, the geometries consist of maximum 15 MapSwipe Tasks, where at least 35% of all users indicated the presence of a building by classifying as \"yes\" or \"maybe\"',\n     'datatype': 'GeoJSON'\n     },\n     {'name': 'Moderate to High Agreement Yes Maybe Geometries',\n     'url': 'https://apps.mapswipe.org/api/yes_maybe/yes_maybe_' + projectId + '.geojson',\n     'description': 'This dataset contains all results where at least 35% of users submitted a \"yes\" or \"maybe\" classification. The output dataset depicts the union of all selected results.',\n     'datatype': 'GeoJSON'\n     },\n     {'name': 'Groups',\n     'url': 'https://apps.mapswipe.org/api/groups/groups_' + projectId + '.csv',\n     'description': 'Groups',\n     'datatype': 'CSV'\n     },\n     {'name': 'History',\n     'url': 'https://apps.mapswipe.org/api/history/history_' + projectId + '.csv',\n     'description': 'History',\n     'datatype': 'CSV'\n     },\n     {'name': 'Results',\n     'url': 'https://apps.mapswipe.org/api/results/results_' + projectId + '.csv',\n     'description': 'Results',\n     'datatype': 'CSV'\n     },\n     {'name': 'Tasks',\n     'url': 'https://apps.mapswipe.org/api/tasks/tasks_' + projectId + '.csv',\n     'description': 'Tasks',\n     'datatype': 'CSV'\n     },\n  ]\n\n  var tableRef = document.getElementById('projectDataTable').getElementsByTagName('tbody')[0];\n  datasets.forEach(function(element) {\n    var tr = tableRef.insertRow();\n\n    var td = document.createElement('td')\n    td.innerHTML = projectId\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    td.innerHTML = element.name\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    td.innerHTML = element.datatype\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    td.innerHTML = element.description\n    tr.appendChild(td)\n\n    td = document.createElement('td')\n    td.innerHTML = '<a href=\"'+element.url+'\" target=\"_blank\">Download</a>'\n    tr.appendChild(td)\n  })\n}\n\n\nfunction makePlot(url, projectId, attribute) {\n  Plotly.d3.csv(url, function(data){ processData(data, projectId, attribute) } );\n};\n\n\nfunction processData(allRows, projectId, attribute) {\n  var x = [], y = [];\n  for (var i=0; i<allRows.length; i++) {\n    var row = allRows[i];\n    x.push( row['day'] );\n    y.push( 100 * row[attribute] );\n  }\n  makePlotly( x, y, projectId, attribute);\n}\n\n\nfunction makePlotly( x, y, projectId, attribute){\n  var plotDiv = document.getElementById(\"plot\");\n  var traces = [{\n    x: x,\n    y: y\n  }];\n\n\n  if (attribute == 'cum_progress') {\n    var layout = {\n      autosize: 350,\n      height: 350,\n      margin: {\n        l: 40,\n        r: 40,\n        b: 40,\n        t: 60,\n        pad: 4\n      },\n      yaxis: {range: [0, 101]},\n      title: {\n        text: 'Progress [%]'\n      }\n    }\n  } else {\n    var layout = {}\n  }\n\n  Plotly.newPlot(attribute, traces, layout,\n    {displayModeBar: false})\n};\n\n\n","'use strict';\n\nimport Navigation from './components/navigation.js';\nimport {initMap} from './components/overviewStats.js';\nimport {initAnalyticsProject} from './components/projectStats.js';\n\nlet html = document.querySelector('html');\nlet isMobile = false;\nlet resizeId;  \n// let menu = new Navigation(document.querySelector('.navigation'));\n\nif (html.classList.contains('mobile')) {        \n    isMobile = true;\n}\n\nif (html.querySelector('#year')) {\n    var theDate = new Date();\n    html.querySelector('#year').innerHTML =theDate.getFullYear();\n}\n\nif (html.querySelector('.burger-menu')) {\n    new Navigation(html.querySelector('.burger-menu'));\n}\n\n// Basic classes to add relevant classes to html tag\nfunction classRemove(element, classes) {\n    classes.forEach(function (clas) {\n        element.classList.remove(clas);\n    });\n}\n\nfunction viewport() {\n    var width = document.body.clientWidth,\n        viewport = 'default';\n\n    if (width >= 1344) {\n        viewport = 'desktop-wide';\n\n    }\n    if (width < 1344) {\n        viewport = 'desktop-compact';\n\n    }\n    if (width < 1024) {\n        viewport = 'tablet-portrait';\n\n    }\n    if (width < 768) {\n        viewport = 'mobile-landscape';\n\n    }\n    if (width < 481) {\n        viewport = 'mobile-portrait';\n\n    }\n\n    classRemove(html, ['default', 'desktop-compact', 'tablet-portrait', 'mobile-landscape', 'mobile-portrait']);\n    html.classList.add(viewport);\n\n    return viewport;\n}\n\nfunction touchEnabled() {\n    if ('ontouchstart' in window || 'onmsgesturechange' in window) {\n        html.classList.add('touchenabled');\n        return true;\n    }\n    html.classList.remove('touchenabled');\n    return false;\n}\n\nfunction device() {\n    var device = 'desktop';\n    switch (viewport()) {\n        case 'desktop-compact':\n            device = 'desktop';\n            if (touchEnabled()) {\n                device = 'tablet';\n            }\n            break;\n        case 'tablet-portrait':\n            device = 'tablet';\n            break;\n        case 'mobile-landscape':\n        case 'mobile-portrait':\n            device = 'mobile';\n            break;\n    }\n    classRemove(html, ['mobile', 'tablet', 'tablet-portrait', 'desktop']);\n    html.classList.add(device);\n\n    return device;\n}\n\nfunction doneResizing(){\n    device();\n    viewport();\n\n    let wasMobile = isMobile;\n\n    html.classList.contains('mobile') ? isMobile = true : isMobile = false;\n\n    if (wasMobile != isMobile) {\n        // isMobile ? menu.closeDesktopSearch() : menu.closeMobileMenu();\n    }\n}\n\n// Basic functions to add relevant classes to html tag\nviewport();\ndevice();\ntouchEnabled();     \n\nwindow.addEventListener('resize', function(){\n    clearTimeout(resizeId);\n    resizeId = setTimeout(doneResizing, 500);\n});\n\nwindow.initMap = initMap;\nwindow.initAnalyticsProject = initAnalyticsProject;\n"]}